#!/usr/bin/env zsh
# 
# open
#    Provide OS X's open utility on GNU/Linux
# 

SCRIPT_NAME="open"
SCRIPT_VERSION="0.2"

source $(dirname $0)/_base.inc.sh



##########################################
# Functions
# 

# 
# Show some information about this script
# 
version() {
	echo "$SCRIPT_NAME $SCRIPT_VERSION"
	echo "Provides macOS's open utility on GNU/Linux"
}

# 
# Display a usage help
# 
usage() {
	echo "Usage:"
	echo "   $SCRIPT_NAME [OPTIONS] [FILENAME]"
	echo 
	echo "Options:"
	echo "  --version -V  Show the version and exit"
	echo "  --help -h     Show this help and exit"
	echo "  -a <App>      Open the file using <App>"
	echo "  -t            Edit the file in \$VISUAL"
	echo "  -e            Edit the file in \$EDITOR"
	echo "  --x11         Start a GUI application without blocking the terminal"
	echo 
	echo "For \"-a <App>\": If the filename is omitted, the application is"
	echo "started without arguments."
	echo "The original open command uses TextEdit.app with \"-t\", and"
	echo "your default text editor with \"-e\""
	echo 
}

# 
# Helper used to launch "gio open"
#     Since $APP cannot contain arguments/parameters, we have to use this workaround.
# 
gio_open() {
	if ! which gio &>/dev/null
	then
		return 1
	fi
	gio open $@
}

# 
# Detect the system's default application for opening files.
# 
get_default_app() {
	if [[ $OS == "Mac OS X" ]]; then
		APP="/usr/bin/open"
	elif which gio &>/dev/null; then
		APP="gio_open"
	elif which xdg-open &>/dev/null; then
		APP="xdg-open"
	else
		echo "$SCRIPT_NAME: Error: Neither gio or xdg-open found in \$PATH!" >&2
		exit 1
	fi
	echo "$APP"
}



##########################################
# Parse command line
# 
if [[ $# -eq 0 ]]; then
    usage >&2
    echo exit 1
fi
if [[ -z "$DISPLAY" && $OS != "Mac OS X" ]]; then
	#echo "$SCRIPT_NAME: Error: \$DISPLAY not set!" >&2
	message_error "\$DISPLAY not set! ${_ANSI_ATTR_ITALIC}open${_ANSI_ATTR_ITALIC_RESET} only works on X11" >&2
	exit 1
fi

APP=$(get_default_app)
OPT_HELP=0
FILES=()
DEBUG=${DEBUG:-0}
while [[ $# -gt 0 ]]; do
	if [[ "$1" == "--version" || "$1" == "-V" ]]; then
		version
		exit 0
		
	elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
		version
		usage
		exit 0
		
	elif [[ "$1" == "--debug" ]]; then
		DEBUG=1
		
	elif [[ "$1" == "-a" ]]; then
		if [[ $# -lt 2 || ${2:0:1} == "-" ]]; then
			usage >&2
			exit 1
		fi
		shift
		APP="$1"
		
	elif [[ "$1" == "-t" ]]; then
		if [[ -z "$VISUAL" ]]; then
			message_error "You need to set \$VISUAL to use \"-t\"."
			exit 1
		fi
		APP=$VISUAL
		
	elif [[ "$1" == "-e" ]]; then
		if [[ -z "$EDITOR" ]]; then
			message_error "You need to set \$EDITOR to use \"-e\"."
			exit 1
		fi
		APP=$EDITOR
		
	elif [[ ${1:0:1} == "-" ]]; then
		usage >&2
		exit 1
		
	else
		FILES+="$1"
		
	fi
	
	shift
	
done

_debug_files=""
for f in ${FILES[@]}; do
	_debug_files+="\"$f\""
done
message_debug "APP   = \"$APP\""
message_debug "FILES = ($_debug_files)"
message_debug "\${#FILES[@]} = ${#FILES[@]}"
unset _debug_files
#[[ $DEBUG -eq 1 ]] && exit 0



##########################################
# Launch app if no files given
# 
if [[ ${#FILES[@]} -eq 0 ]]; then
	message_debug "No files given. Launching \$APP..."
	exit 42
fi



##########################################
# Open all files/URLs from $FILES
# 
for FILE in ${FILES[@]}; do
	# Check if file is readable or looks like a valid URL
	if [[ $FILE == *:/* || ! -r $FILE ]]; then
		echo "$SCRIPT_NAME: File not found or not readable: $FILE" >&2
		exit 1
	fi
	
	# Ensure a valid value for $APP
	if ! which $APP &>/dev/null; then
		echo "$SCRIPT_NAME: Command not found: $APP" >&2
		exit 1
	fi
	
	# Open file using $APP, detached from the terminal
	$APP "$FILE" </dev/null &>/dev/null &|
	
done



