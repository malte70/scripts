#!/usr/bin/env zsh
#
# gitinfo
#    Part of: malte70/scripts
# 
# Shows information about a git repository
# for the zsh prompt.
#
# Copyright (c) 2014-2016 Malte Bublitz, http://malte70.bplaced.net
# All rights reserved.
#

SCRIPT_NAME="gitinfo"
SCRIPT_PROJECT_NAME=""
SCRIPT_VERSION="0.20180909"

CACHEDIR="$HOME/.cache/gitinfo"
CACHEFILE="${CACHEDIR}/`pwd | tr '/' '='`"

usage_help() {
	cat <<EOF
Usage:
	gitinfo
	gitinfo --help
	gitinfo --clean-cache
	gitinfo --clean-cache-pwd

Options:
	--help             Show this help
	--clean-cache      Clean up the whole cache
	--clean-cache-pwd  Clean up the cache for the current directory and all sub-directories
	--ignore-cache     Ignore the cache

EOF
}

DO_IGNORE_CACHE="yes"

if [[ $1 == "--help" ]]; then
	usage_help
	exit 0
elif [[ $1 == "--clean-cache" ]]; then
	rm -f $CACHEDIR/=*
	exit 0
elif [[ $1 == "--clean-cache-pwd" ]]; then
	rm -f ${CACHEFILE} 2>/dev/null
	rm -f ${CACHEFILE}* 2>/dev/null
	exit 0
elif [[ $1 == "--ignore-cache" ]]; then
	DO_IGNORE_CACHE="yes"
elif [[ $# -ne 0 ]]; then
	usage_help >&2
	exit 1
fi

get_root_folder_name() {
	GIT_DIR=$(git rev-parse --git-dir )
	if [[ $GIT_DIR == ".git" ]]; then
		GIT_DIR=$PWD
	else
		GIT_DIR=$(echo $GIT_DIR | sed 's/\.git//g')
	fi
	basename $GIT_DIR
}

[ ! -d $CACHEDIR ] && mkdir -p $CACHEDIR
if ! git rev-parse --git-dir &>/dev/null; then
	UPSTREAM="no git"
else
	if [[ -f $CACHEFILE && $DO_IGNORE_CACHE == "no" && $(python2 -c 'import os.path,time;print "yes" if (time.time()-os.path.getmtime("'"$CACHEFILE"'"))/(60*60*24) > 2.0 else "no"') == "no" ]]; then
		UPSTREAM=`cat $CACHEFILE`
	else
		REMOTE=`git config --get remote.origin.url`
		if [ -z "$REMOTE" ]; then
			REMOTE="$(get_root_folder_name)"
		fi
		BRANCH="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"
		if [[ $? -eq 128 ]]; then
			BRANCH="master"
		fi
		
		# 
		# Show shortcuts for some known remotes
		# 
		if [[ "${REMOTE:0:14}" == "git@github.com" ]]; then
			UPSTREAM="${REMOTE:15:-4}:$BRANCH"
			
		elif [[ "${REMOTE:0:19}" == "git@gist.github.com" ]]; then
			UPSTREAM="gist/${REMOTE:20:-4}:$BRANCH"
			
		elif [[ "${REMOTE:0:19}" == "https://github.com/" ]]; then
			UPSTREAM="`echo ${REMOTE:19} | sed 's/.git//g'`:$BRANCH"
			
		elif [[ "${REMOTE:0:28}" == "ssh://aur@aur.archlinux.org/" ]]; then
			UPSTREAM="aur-ssh/${REMOTE:28:-4}"
			
		elif [[ "${REMOTE:0:26}" == "https://aur.archlinux.org/" ]]; then
			UPSTREAM="aur/${REMOTE:26:-4}"
			
		elif [[ "${REMOTE:0:23}" == "https://git.heroku.org/" ]]; then
			UPSTREAM="heroku/${REMOTE:23:-4}"
			
		else
			UPSTREAM="${REMOTE}:$BRANCH"
		fi
		
		echo -n $UPSTREAM > $CACHEFILE
	fi
	# number of uncommited changes
	# do not cache this.
	CHANGES=`git status --short --ignore-submodules=all | wc -l | stripwhite`
	if [ $CHANGES -gt 0 ]
	then
		UPSTREAM="${UPSTREAM}:${CHANGES}"
	fi
fi
echo $UPSTREAM
