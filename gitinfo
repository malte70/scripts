#!/usr/bin/env zsh
#
# git info
#    Shows information about a git repository
#    for the zsh prompt.
#

CACHEDIR="$HOME/.cache/git-info"

usage_help() {
	cat <<EOF
Usage:
	gitinfo
	gitinfo --help
	gitinfo --clean-cache

Options:
	--help         Show this help
	--clean-cache  Clean up the whole cache

EOF
}

if [[ $1 == "--help" ]]; then
	usage_help
	exit 0
elif [[ $1 == "--clean-cache" ]]; then
	rm -f $CACHEDIR/=*
	exit 0
elif [[ $# -ne 0 ]]; then
	usage_help >&2
	exit 1
fi

get_root_folder_name() {
	GIT_DIR=$(git rev-parse --git-dir )
	if [[ $GIT_DIR == ".git" ]]; then
		GIT_DIR=$PWD
	else
		GIT_DIR=$(echo $GIT_DIR | sed 's/\.git//g')
	fi
	basename $GIT_DIR
}

[ ! -d $HOME/.cache/git-info ] && mkdir -p $HOME/.cache/git-info
if ! git rev-parse --git-dir &>/dev/null; then
	UPSTREAM="no git"
else
	CACHEFILE="${CACHEDIR}/`pwd | tr '/' '='`"
	if [ -f $CACHEFILE ] && [[ $(python2 -c 'import os.path,time;print "yes" if (time.time()-os.path.getmtime("'"$CACHEFILE"'"))/(60*60*24) > 2.0 else "no"') == "no" ]]; then
		UPSTREAM=`cat $CACHEFILE`
	else
		REMOTE=`git config --get remote.origin.url`
		if [ -z "$REMOTE" ]; then
			REMOTE="$(get_root_folder_name)"
		fi
		BRANCH="$(git rev-parse --abbrev-ref HEAD)"
		if [[ "${REMOTE:0:14}" == "git@github.com" ]]; then
			UPSTREAM="${REMOTE:15:-4}:$BRANCH"
		elif [[ "${REMOTE:0:19}" == "git@gist.github.com" ]]; then
			UPSTREAM="Gist/${REMOTE:20:-4}:$BRANCH"
		elif [[ "${REMOTE:0:19}" == "https://github.com/" ]]; then
			UPSTREAM="`echo ${REMOTE:19} | sed 's/.git//g'`:$BRANCH"
		elif [[ "${REMOTE:0:15}" == "git@git.mcbx.de" ]]; then
			UPSTREAM="git.mcbx.de/`echo ${REMOTE:16} | sed 's/.git//g'`:$BRANCH"
		elif [[ "${REMOTE:0:16}" == "git@repos.dma.do" ]]; then
			UPSTREAM="repos.dma.do/${REMOTE:17:-4}:$BRANCH"
		elif [[ "${REMOTE:0:31}" == "ssh://storage@abyss.mcbx.de:22/" ]]; then
			UPSTREAM="SparkleShare:${REMOTE:44}"
		elif [[ "${REMOTE:0:29}" == "ssh://aur@aur4.archlinux.org/" ]]; then
			UPSTREAM="AUR:${REMOTE:29:-4}"
		elif [[ "${REMOTE:0:28}" == "ssh://aur@aur.archlinux.org/" ]]; then
			UPSTREAM="AUR:${REMOTE:28:-4}"
		else
			UPSTREAM="${REMOTE}:$BRANCH"
		fi
		echo -n $UPSTREAM > $CACHEFILE
	fi
	# number of uncommited changes
	# do not cache this.
	CHANGES=`git status --short --ignore-submodules=all | wc -l | stripwhite`
	if [ $CHANGES -gt 0 ]
	then
		UPSTREAM="${UPSTREAM}:${CHANGES}"
	fi
fi
echo $UPSTREAM
