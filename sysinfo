#!/usr/bin/env bash
# Use bash or zsh, sh won't work in many cases!

LOCALE_OLD=$LC_ALL
export LC_ALL=C

version_info() {
	echo "sysinfo 0.20180713"
	echo "Copyright (c) 2014-2018 Malte Bublitz"
}
display_help() {
	version_info
	echo
	echo "Options:
	-V	Display version information
	-h	Display this help
Reort options
	-o	Operating System
	-r	OS Kernel
	-p	Platform/machine type
	-n	Nodename/Hostname
	-u	Uptime
	-w	Window Manager
	-m	Used/available RAM
	-H  Hardware Info
	-c	CPU info
	-e	Environment (Shell/Editor/Browser)
	-l  Locale
	-a	Display all information"
}
info_os() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 3))');'`
	echo -n "OS${DOTS}: "
	if [ -f /etc/arch-release ]; then
		echo -n "Arch Linux"
	elif [ -f /etc/lsb-release ]; then
		(
			. /etc/lsb-release
			echo -n $DISTRIB_DESCRIPTION
		)
	elif [ -f /etc/os-release ]; then
		(
			. /etc/os-release
			echo -n $NAME
		)
	elif [ `uname` == "Darwin" ]; then
		echo -n "Mac OS X "
		python3 -c 'import platform; print(platform.mac_ver()[0],end="")' | tr -d "\n"
	elif grep GhostBSD /etc/motd &>/dev/null; then
		echo -n "GhostBSD"
		[ `uname -r` == "10.0-RELEASE" ] && echo -n " 4.0"
	elif [ `uname -o` == "Cygwin" ]; then
		python -c 'import OSDetect; _i = OSDetect.OSInfo(); print _i.GetInfo()["Distribution"]' | tr -d "\n"
	elif [ `uname -o` == "Android" ]; then
		echo -n "$(uname -o) $(getprop ro.build.version.release) (API Level $(getprop ro.build.version.sdk))"
	else
		uname -o | tr -d "\n"
	fi
	echo
}
info_platform() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 8))');'`
	echo -n "Machine${DOTS}: "
	uname -m
}
info_kernel() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 7))');'`
	echo -n "Kernel${DOTS}: "
	uname -o &>/dev/null && [ `uname -o` == "Cygwin" ] && {
		echo -n "Windows NT "
		python -c 'import OSDetect; _i = OSDetect.OSInfo(); print _i.GetInfo()["OSVersion"]'
	} && exit
	uname -sr
}
info_nodename() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 9))');'`
	echo -n "Hostname${DOTS}: "
	if [ -z "$TERMUX_ROOT" ]; then
		hostname -f 2>/dev/null
		[[ $? -ne 0 ]] && hostname
	else
		getprop net.hostname
	fi
}
info_uptime() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 7))');'`
	echo -n "Uptime${DOTS}: "
	if [ `uname` == "Darwin" ]; then
		LC_ALL=C uptime | python3 -c 'import sys;l = sys.stdin.readline().split(","); print(" ".join(l[:-2]))' | cut -d" " -f4-
	elif [ `uname -o ` == Cygwin ]; then
		python -c 'import OSDetect; _i = OSDetect.OSInfo(); print _i.GetInfo()["Uptime"]'
	elif [ -n "$TERMUX_ROOT" ]; then
		# Termux's uptime doesn't show the user count!
		LC_ALL=C uptime | python -c 'import sys;l = sys.stdin.readline().split(","); print(" ".join(l[:-3]))' | cut -d" " -f4- | stripwhite
	else
		LC_ALL=C uptime | python3 -c 'import sys;l = sys.stdin.readline().split(","); print(" ".join(l[:-4]))' | cut -d" " -f4- | stripwhite
	fi
}
info_wm() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 3))');'`
	echo -n "WM${DOTS}: "
	WM=""
	ps x | grep "X" >/dev/null | grep -v grep || WM="None"
	ps x | grep "gnome-session" | grep -v grep >/dev/null && WM="GNOME `gnome-help --version | cut -d\  -f2`"
	ps x | grep "mate-session" | grep -v grep >/dev/null && WM="`mate-about --version`"
	ps x | grep "awesome" | grep -v grep >/dev/null && WM="Awesome"
	ps x | grep "startkde" | grep -v grep >/dev/null && WM="KDE $(kde-open --version | grep KDE | cut -d\  -f2)"
	ps x | grep "SystemUIServer" | grep -v grep >/dev/null && WM="Aqua"
	ps x | grep "cinnamon" | grep -v grep >/dev/null && WM="$(cinnamon --version)"
	ps x | grep "lxsession" | grep -v grep >/dev/null && WM="LXDE"
	ps x | grep "karmen" | grep -v grep >/dev/null && WM="Karmen"
	#[ -z $WM -o $WM = "None" ] && WM="Unknown"
	echo $WM
}
info_mem() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 4))');'`
	echo -n "RAM${DOTS}: "
	if [ `uname` == "Darwin" ]; then
		# Darwin/OS X is missing the free command, using "top" instead.
		top -l 1 | head -n 10 | grep PhysMem | cut -d"(" -f 2 | cut -d" " -f1 | cut -f1 | tr -d "M" | tr -d "\n"
		echo -n " MB / "
		{
			top -l 1 | head -n 10 | grep PhysMem | awk '{ print $2 }' | sed 's/M//g;s/G/*1024/g' | tr -d "M\n"
			echo -n "+"
			top -l 1 | head -n 10 | grep PhysMem | awk '{ print $6 }' | tr -d "M"
		} | bc | tr -d "\n"
		echo " MB"
	else
		FREE="free"
		GREPSTRING="buffers/cache"
		if [ `uname` == "FreeBSD" ]; then
			# Use freecolor on BSD (available in sysutils/freecolor).
			# freecolor gives an output similiar to GNU's free, but not exactly the same,
			# therefore we need another string for grep.
			FREE="freecolor -o"
		fi
		$FREE | grep $GREPSTRING &>/dev/null || GREPSTRING="^Mem"
		$FREE -m | grep $GREPSTRING | awk '{ print $3 "MB" }' | tr -d "\n"
		echo -n " / "
		$FREE -m | grep ^Mem | awk '{ print $2 "MB" }'
	fi
}
info_hardware() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 9))');'`
	echo -n "Hardware${DOTS}: "
	if [ `uname` == "Linux" ]; then
		if [ -r "/sys/devices/virtual/dmi/id/product_name" ]; then
			if grep KVM /sys/devices/virtual/dmi/id/product_name &>/dev/null; then
				echo "Virtual Machine (KVM)"
			elif grep "^flags" /proc/cpuinfo | grep hypervisor &>/dev/null; then
				echo "Virtual Machine"
			else
				cat /sys/devices/virtual/dmi/id/product_name
			fi
		elif [ -r /sys/firmware/devicetree/base/model ]; then
			cat /sys/firmware/devicetree/base/model | tr "\0" "\n"
		fi
	elif [ `uname` == "Darwin" ]; then
		# https://apple.stackexchange.com/a/98089
		curl -s https://support-sp.apple.com/sp/product\?cc=$(
  system_profiler SPHardwareDataType \
    | awk '/Serial/ {print $4}' \
    | cut -c 9-
) | sed 's|.*<configCode>\(.*\)</configCode>.*|\1|'
		echo
	else
		echo "Unable to detect"
	fi
}
info_cpu() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 4))');'`
	echo -n "CPU${DOTS}: "
	if [ `uname` == "Darwin" ]; then
		sysctl -a | grep machdep.cpu.brand_string | cut -c 27-
	elif [ `uname` == "FreeBSD" ]; then
		sysctl -a | grep hw.model | cut -c 11-
	else
		if grep "S390" /proc/cpuinfo &>/dev/null
		then
			lscpu | grep "Vendor ID" | cut -c24- | tr "\n" " "
			echo -n "(CPU Type "
			grep "^processor 0" /proc/cpuinfo | cut -d= -f4 | stripwhite | tr -d "\n"
			echo ")"
		else
		grep "model name" /proc/cpuinfo | uniq | cut -d: -f2- | stripwhite
		fi
	fi
}
info_android() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 7))');'`
	echo "Device${DOTS}: `getprop ro.config.marketing_name` (`getprop ro.product.model`)"
}
info_env() {
    # 
    # $SHELL
    # 
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 7))');'`
	[ -n "$SHELL" ] && echo "\$SHELL${DOTS}: `basename $SHELL`"
	
    # 
    # $EDITOR
    # 
    if [ -n "$EDITOR" ]; then
        # Values might be "vim" or "/bin/vim", so run which before basename!
        ENV_EDITOR="$(basename $(which $EDITOR))"
    else
        ENV_EDITOR=""
    fi
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 8))');'`
	[ -n "$ENV_EDITOR" ] && echo "\$EDITOR${DOTS}: $ENV_EDITOR"
    
    # 
    # $BROWSER
    # 
    if [ -n "$BROWSER" ]; then
        ENV_BROWSER="$(basename $(which $BROWSER))"
    else
        ENV_BROWSER=""
    fi
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 9))');'`
	[ -n "$ENV_BROWSER" ] && echo "\$BROWSER${DOTS}: $ENV_BROWSER"
}
info_locale() {
	DOTS=`perl -e 'print("." x '$(( ${DESC_COL_LENGTH} - 7))');'`
	[ -n $LOCALE_OLD ] && locale=$LOCALE_OLD # LC_ALL is overwritten, use the backup.
	[ -n $LANG ] && locale=$LANG
	[ -z $locale ] && locale=C
	echo "Locale${DOTS}: $locale"
}
info_all() {
	export DESC_COL_LENGTH=9
	info_os
	info_kernel
	info_platform
	info_nodename
	info_uptime
	info_wm
	info_mem
	if [ -z "$TERMUX_ROOT" ]; then
		info_hardware
		info_cpu
	else
		info_android
	fi
	info_env
	info_locale
}

if [[ -z "$1" ]]; then
	info_all
	exit 0
elif [[ "$1" == "--help" ]]; then
	display_help
	exit 0
elif [[ "$1" == "--version" ]]; then
	display_version
	exit 0
fi
# Length for descriptive column
DESC_COL_LENGTH=2

# parse arguments once to get $DESC_COL_LENGTH
while getopts "VhornuwmeplacH" opt; do
	case $opt in
		o)
			if [[ $DESC_COL_LENGTH -lt 3 ]]; then
				DESC_COL_LENGTH=3
			fi
			;;
		r)
			if [[ $DESC_COL_LENGTH -lt 7 ]]; then
				DESC_COL_LENGTH=7
			fi
			;;
		p)
			if [[ $DESC_COL_LENGTH -lt 8 ]]; then
				DESC_COL_LENGTH=8
			fi
			;;
		H)
			if [[ $DESC_COL_LENGTH -lt 8 ]]; then
				DESC_COL_LENGTH=8
			fi
			;;
		n)
			if [[ $DESC_COL_LENGTH -lt 9 ]]; then
				DESC_COL_LENGTH=9
			fi
			;;
		u)
			if [[ $DESC_COL_LENGTH -lt 7 ]]; then
				DESC_COL_LENGTH=7
			fi
			;;
		w)
			if [[ $DESC_COL_LENGTH -lt 3 ]]; then
				DESC_COL_LENGTH=3
			fi
			;;
		m)
			if [[ $DESC_COL_LENGTH -lt 3 ]]; then
				DESC_COL_LENGTH=3
			fi
			;;
		h)
			if [[ $DESC_COL_LENGTH -lt 9 ]]; then
				DESC_COL_LENGTH=9
			fi
			;;
		c)
			if [[ $DESC_COL_LENGTH -lt 4 ]]; then
				DESC_COL_LENGTH=4
			fi
			;;
		e)
			if [[ $DESC_COL_LENGTH -lt 8 ]]; then
				DESC_COL_LENGTH=8
			fi
			;;
		l)
			if [[ $DESC_COL_LENGTH -lt 6 ]]; then
				DESC_COL_LENGTH=6
			fi
			;;
	esac
done

OPTIND=1

# parse arguments again, and now, display the information.
while getopts "VhornuwmpelaHc" opt; do
	case $opt in
		V)
			version_info
			exit 0
			;;
		h)
			display_help
			exit 0
			;;
		o)
			info_os
			;;
		r)
			info_kernel
			;;
		p)
			info_platform
			;;
		n)
			info_nodename
			;;
		u)
			info_uptime
			;;
		w)
			info_wm
			;;
		m)
			info_mem
			;;
		H)
			info_hardware
			;;
		c)
			info_cpu
			;;
		e)
			info_env
			;;
		l)
			info_locale
			;;
		a)
			info_all
			;;
		*)
			display_help
			exit 1
			;;
	esac
done
exit 0
